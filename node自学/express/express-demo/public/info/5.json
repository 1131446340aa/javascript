{
    "title": "typescript来一份判断对称二叉树?",
    "date": "2020-05-20 23:25",
    "id": 5,
    "author": "黄力豪",
    "connect": [ "let Tree = {\n //定义一个数结构的数据,内部使用类型推断\n        root: {\n            value: 5,\n            left: {\n                value: 3,\n                left: {\n                    value: 4\n                },\n                right: {\n                    value: 6\n                }\n            },\n            right: {\n                value: 3,\n                left: {\n                    value: 6,\n                    left: {\n                        value: 5\n                    }\n                },\n                right: {\n                    value: 4\n                }\n            }\n        }\n    }\n    interface TREE {\n        //定义接口树\n        //left,和right可选\n        left?: TREE\n        right?: TREE,\n        value: number\n    }\n    \n    function isduichenTree(tree: TREE): boolean {\n        //返回boolean\n        // 参数为接口树类型\n        let state = true\n        //声明返回结果\n        function trees(leftNode: TREE, rightNode: TREE) {\n            if ((leftNode && rightNode && (leftNode.value === rightNode.value))) {\n                //如果左右节点都存在,且左右节点的值相等\n                //递归调用\n                trees(leftNode.left, rightNode.right)\n                trees(leftNode.right, rightNode.left)\n    \n            }\n            else if (!leftNode && !rightNode) { \n                //如果左右节点都不存在\n            }\n            else {\n                //表示出现两个节点不等\n                state = false\n                return state\n            }\n        }\n        trees(tree.left, tree.right)\n        return state\n    }\n    isduichenTree(Tree.root)\n    " ],
    "imgs": []}